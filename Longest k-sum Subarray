------------------------------------------------------ Question Statement -----------------------------------------------------------
In this challenge, we are given an array and we need to find out the length of longest subarray whose sum is equal to given integer K.

Sample Input

arr = { 0,-2,1,2,3,4,5,15,10,5 }
K = 15
Sample output

4

Explanation
The following subarray has the sum 15 and is the longest.

1,2,3,4,5

Expected Complexity
O(N)

Hint
Use prefix sums + unordered_map.

---------------------------------------------------------------------------------------------------------------------------------------
Brute:-                                                    Solution 1 
                                                    TC -> O(N3), SC -> O(1)
#include<bits/stdc++.h>
using namespace std;

int longestSubarrayKSum(vector<int> arr,int target){
    //Complete this function and return the length of longest subarray
    
    int n = arr.size();
    int ans = INT_MIN;
    for(int i = 0; i < n; i++)
    {
        for(int j = i; j < n; j++)
        {
            int sum = 0, cnt = 0;
            for(int k = i; k <= j; k++)
            {
                sum += arr[k];
                cnt++;
            }
            if(sum == target)
            {
                ans = max(ans, cnt);
            }
        }
    }
    return ans;
    
}
-------------------------------------------------------------------------------------------------------------------------------------
Brute:-                                                    Solution 2
                                                    TC -> O(N2), SC -> O(1)
#include<bits/stdc++.h>
using namespace std;

int longestSubarrayKSum(vector<int> arr,int target){
    //Complete this function and return the length of longest subarray
    
    int n = arr.size();
    int ans = INT_MIN;
    for(int i = 0; i < n; i++)
    {
        int sum = 0, cnt = 0;
        for(int j = i; j < n; j++)
        {
            sum += arr[j];
            cnt++;
            if(sum == target)
            {
                ans = max(ans, cnt);
            }
        }
    }
    return ans;
    
}
-------------------------------------------------------------------------------------------------------------------------------------
Better -> Hashing                                          Solution 3
                                                    TC -> O(N), SC -> O(N)
#include<bits/stdc++.h>
using namespace std;

int longestSubarrayKSum(vector<int> arr,int k){
    //Complete this function and return the length of longest subarray
    int n = arr.size();
    int ans = INT_MIN;
        
    int sum = 0;
    unordered_map<int, int> mp;
    for(int i = 0; i < n; i++)
    {
        sum += arr[i];
        if(sum == k)
            ans = max(ans, i+1);
        if(mp.find(sum-k) != mp.end())
            ans = max(ans, i - mp[sum-k]);
        mp[sum] = i;
    }
    return ans;
    
}
